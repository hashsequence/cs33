#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>


int counter = 0;

void* routine(void* N)
{
  void* N_0 = malloc(sizeof(int));
  *(int*)N_0 = *(int*)N;
  if (*(int*)N_0  == 0)
    {
      //       printf("made %d threads \n",*(int*)N_0);
       printf("Hello, world!\n");
       counter++;
    }

  if (*(int*)N_0 > 0)
    {
      int a;
      int b;
      *(int*)N_0 = ((*(int*)N) / 2) - 1;
      pthread_t L_tid, R_tid;
      void* N_1 = malloc(sizeof(int));
      void* N_2 = malloc(sizeof(int));
      *(int*)N_1 = *(int*)N_0;
      *(int*)N_2 = *(int*)N_0;
      a = pthread_create(&L_tid, NULL, routine, N_1 );
      if (a)
	{
	  fprintf(stderr, "pthread creation failed\n");
	  exit(1);
	}
      b = pthread_create(&R_tid, NULL, routine, N_2 );
      if (b)
	{
	  fprintf(stderr, "pthread creation failed\n");
	  exit(1);
	}
      pthread_join(R_tid, NULL);
      pthread_join(L_tid, NULL);
      //printf("made %d threads\n",(*(int*)N_0 + 1)*2);
      printf("Hello, world!\n");
      counter++;
      free(N_1);
      free(N_2);
    }
    free(N_0);
    return NULL;
}

void print_hello(int N)
{
  pthread_t tid;
  void* thread_return;
  void* N_P = malloc(sizeof(int));
  *(int*)N_P = N;
  //pthread_create(&tid, NULL, routine, N_0);
  //pthread_join(tid, NULL);
  routine(N_P);
  // printf("made %d threads\n", N);
  free(N_P);
}

int main(int argc, char* argv[])
{
  if (argc != 2)
    {
      fprintf(stderr, "need integer argument greater than zero\n");
      exit(1);
    }
  int N;
  sscanf(argv[1], "%d", &N);
  int value =  1;
  int i = 0;
  for (i = 0; i < N; i++)
    {
      value*=2;
    }
  value -= 2;
  if (N >= 7 ||  N <= 0)
    {
      fprintf(stderr, "n has to be less than 7 and greater than 0\n");
      exit(1);
    }
  //printf("value is %d\n", value);
  print_hello(value);
  //printf("number of hello: %d \n", counter);
  return 0;
}
