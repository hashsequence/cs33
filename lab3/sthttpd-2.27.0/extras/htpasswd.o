	.file	"htpasswd.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"Interrupted.\n"
	.text
	.p2align 4,,15
	.globl	interrupted
	.type	interrupted, @function
interrupted:
.LFB9:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	stderr(%rip), %rcx
	movl	$13, %edx
	movl	$1, %esi
	movl	$.LC0, %edi
	call	fwrite
	cmpl	$-1, tfd(%rip)
	je	.L2
	movl	$temp_template, %edi
	call	unlink
.L2:
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE9:
	.size	interrupted, .-interrupted
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC1:
	.string	"Usage: htpasswd [-c] passwordfile username\n"
	.align 8
.LC2:
	.string	"The -c flag creates a new file.\n"
	.text
	.p2align 4,,15
	.type	usage, @function
usage:
.LFB8:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	stderr(%rip), %rcx
	movl	$43, %edx
	movl	$1, %esi
	movl	$.LC1, %edi
	call	fwrite
	movq	stderr(%rip), %rcx
	movl	$.LC2, %edi
	movl	$32, %edx
	movl	$1, %esi
	call	fwrite
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE8:
	.size	usage, .-usage
	.p2align 4,,15
	.type	putline, @function
putline:
.LFB5:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rdi, %rbp
	leaq	1(%rsi), %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movsbl	(%rsi), %edi
	testb	%dil, %dil
	je	.L10
	.p2align 4,,10
	.p2align 3
.L11:
	addq	$1, %rbx
	movq	%rbp, %rsi
	call	fputc
	movsbl	-1(%rbx), %edi
	testb	%dil, %dil
	jne	.L11
.L10:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%rbp, %rsi
	movl	$10, %edi
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	fputc
	.cfi_endproc
.LFE5:
	.size	putline, .-putline
	.section	.text.unlikely,"ax",@progbits
	.type	strd, @function
strd:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	xorl	%eax, %eax
	orq	$-1, %rcx
	movq	%rdi, %rbp
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	repnz scasb
	movq	%rcx, %rbx
	notq	%rbx
	movq	%rbx, %rdi
	call	malloc
	movq	%rbp, %rsi
	movq	%rbx, %rcx
	movq	%rax, %rdi
	rep movsb
	popq	%rdx
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE2:
	.size	strd, .-strd
	.type	to64.constprop.0, @function
to64.constprop.0:
.LFB13:
	.cfi_startproc
	movq	%rsi, %rax
	sarq	$6, %rsi
	andl	$63, %eax
	andl	$63, %esi
	movb	itoa64(%rax), %al
	movb	%al, (%rdi)
	movb	itoa64(%rsi), %al
	movb	%al, 1(%rdi)
	ret
	.cfi_endproc
.LFE13:
	.size	to64.constprop.0, .-to64.constprop.0
	.section	.rodata.str1.1
.LC3:
	.string	"New password:"
.LC4:
	.string	"Re-type new password:"
.LC5:
	.string	"They don't match, sorry.\n"
.LC6:
	.string	"%s:%s\n"
.LC7:
	.string	"crypt() returned NULL, sorry\n"
	.section	.text.unlikely
	.type	add_password, @function
add_password:
.LFB7:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	%rsi, %rbx
	addq	$-128, %rsp
	.cfi_def_cfa_offset 160
	movq	stdin(%rip), %rdi
	call	fileno
	movl	%eax, %edi
	call	isatty
	testl	%eax, %eax
	jne	.L19
	leaq	16(%rsp), %r12
	movq	stdin(%rip), %rdx
	movl	$100, %esi
	movq	%r12, %rdi
	call	fgets
	xorl	%eax, %eax
	orq	$-1, %rcx
	movq	%r12, %rdi
	repnz scasb
	notq	%rcx
	subq	$2, %rcx
	cmpb	$10, 16(%rsp,%rcx)
	jne	.L20
	movb	$0, 16(%rsp,%rcx)
	jmp	.L20
.L19:
	movl	$.LC3, %edi
	call	getpass
	movq	%rax, %rdi
	call	strd
	movl	$.LC4, %edi
	movq	%rax, %r12
	call	getpass
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	strcmp
	testl	%eax, %eax
	je	.L20
	movq	stderr(%rip), %rcx
	movl	$25, %edx
	movl	$1, %esi
	movl	$.LC5, %edi
	call	fwrite
	cmpl	$-1, tfd(%rip)
	je	.L21
	movl	$temp_template, %edi
	call	unlink
.L21:
	movl	$1, %edi
	call	exit
.L20:
	xorl	%edi, %edi
	call	time
	movl	%eax, %edi
	call	srandom
	call	random
	movq	%rsp, %rdi
	movq	%rax, %rsi
	call	to64.constprop.0
	movq	%rsp, %rsi
	movq	%r12, %rdi
	call	crypt
	testq	%rax, %rax
	je	.L22
	movq	%rax, %rcx
	movq	%rbp, %rdx
	movl	$.LC6, %esi
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	fprintf
	jmp	.L18
.L22:
	movq	stderr(%rip), %rcx
	movl	$29, %edx
	movl	$1, %esi
	movl	$.LC7, %edi
	call	fwrite
.L18:
	subq	$-128, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE7:
	.size	add_password, .-add_password
	.text
	.p2align 4,,15
	.type	get_line.constprop.1, @function
get_line.constprop.1:
.LFB12:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rsi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	xorl	%ebp, %ebp
	movq	%rdi, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	jmp	.L33
	.p2align 4,,10
	.p2align 3
.L30:
	addq	$1, %rbx
	cmpb	$4, %dl
	sete	%cl
	cmpb	$10, %dl
	sete	%al
	orb	%al, %cl
	jne	.L34
	cmpl	$255, %ebp
	je	.L34
	addl	$1, %ebp
.L33:
	movq	%r12, %rdi
	movq	%rbx, %r13
	call	fgetc
	cmpb	$13, %al
	movl	%eax, %edx
	movb	%al, (%rbx)
	jne	.L30
	movq	%r12, %rdi
	call	fgetc
	movl	%eax, %edx
	movb	%al, (%rbx)
	jmp	.L30
	.p2align 4,,10
	.p2align 3
.L34:
	movb	$0, 0(%r13)
	movq	%r12, %rdi
	call	feof
	testl	%eax, %eax
	setne	%al
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE12:
	.size	get_line.constprop.1, .-get_line.constprop.1
	.section	.text.unlikely
	.type	getword.constprop.2, @function
getword.constprop.2:
.LFB11:
	.cfi_startproc
	xorl	%eax, %eax
.L38:
	movb	(%rsi,%rax), %cl
	movl	%eax, %edx
	leaq	(%rsi,%rax), %r8
	cmpb	$58, %cl
	je	.L44
	testb	%cl, %cl
	je	.L44
	movb	%cl, (%rdi,%rax)
	incq	%rax
	jmp	.L38
.L44:
	movb	$0, (%rdi,%rax)
	cmpb	$0, (%r8)
	je	.L41
	leal	1(%rdx), %eax
	cltq
.L42:
	movb	(%rsi,%rax), %dl
	incq	%rsi
	movb	%dl, -1(%rsi)
	testb	%dl, %dl
	jne	.L42
	ret
.L41:
	movb	$0, (%rsi)
	ret
	.cfi_endproc
.LFE11:
	.size	getword.constprop.2, .-getword.constprop.2
	.section	.rodata.str1.1
.LC8:
	.string	"-c"
.LC9:
	.string	"w"
	.section	.rodata.str1.8
	.align 8
.LC10:
	.string	"Could not open passwd file %s for writing.\n"
	.section	.rodata.str1.1
.LC11:
	.string	"fopen"
.LC12:
	.string	"%s: filename is too long\n"
	.section	.rodata.str1.8
	.align 8
.LC13:
	.string	"%s: filename contains an illegal character\n"
	.section	.rodata.str1.1
.LC14:
	.string	"%s: username is too long\n"
	.section	.rodata.str1.8
	.align 8
.LC15:
	.string	"%s: username contains an illegal character\n"
	.section	.rodata.str1.1
.LC16:
	.string	"Adding password for %s.\n"
.LC17:
	.string	"Could not open temp file.\n"
.LC18:
	.string	"r"
	.section	.rodata.str1.8
	.align 8
.LC19:
	.string	"Could not open passwd file %s for reading.\n"
	.align 8
.LC20:
	.string	"Use -c option to create new one.\n"
	.section	.rodata.str1.1
.LC21:
	.string	"Adding user %s\n"
	.section	.rodata.str1.8
	.align 8
.LC22:
	.string	"Changing password for user %s\n"
	.section	.rodata.str1.1
.LC23:
	.string	"cp %s %s"
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB10:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movq	%rsi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movl	$interrupted, %esi
	movl	%edi, %ebx
	movl	$2, %edi
	subq	$1280, %rsp
	.cfi_def_cfa_offset 1328
	movl	$-1, tfd(%rip)
	call	signal
	cmpl	$4, %ebx
	je	.L95
	cmpl	$3, %ebx
	je	.L96
.L58:
	call	usage
.L95:
	movq	8(%rbp), %rdi
	movl	$.LC8, %esi
	call	strcmp
	testl	%eax, %eax
	jne	.L58
	movq	16(%rbp), %rdi
	movl	$.LC9, %esi
	call	fopen
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L97
	movq	16(%rbp), %r13
	orq	$-1, %r12
	xorl	%ebx, %ebx
	movq	%r12, %rcx
	movl	%ebx, %eax
	movq	%r13, %rdi
	repnz scasb
	notq	%rcx
	addq	%r12, %rcx
	cmpq	$255, %rcx
	ja	.L89
	movl	$59, %esi
	movq	%r13, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L61
	movl	$62, %esi
	movq	%r13, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L61
	movq	24(%rbp), %r13
	movl	%ebx, %eax
	movq	%r12, %rcx
	movq	%r13, %rdi
	repnz scasb
	notq	%rcx
	leaq	-1(%rcx), %rax
	cmpq	$255, %rax
	ja	.L91
	movl	$58, %esi
	movq	%r13, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L98
.L92:
	movq	0(%rbp), %rdx
	movl	$.LC15, %esi
	jmp	.L90
.L96:
	movl	$temp_template, %edi
	call	mkstemp
	movl	$.LC9, %esi
	movl	%eax, %edi
	movl	%eax, tfd(%rip)
	call	fdopen
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L99
	movq	8(%rbp), %r13
	orq	$-1, %r12
	xorl	%ebx, %ebx
	movq	%r12, %rcx
	movl	%ebx, %eax
	movq	%r13, %rdi
	repnz scasb
	notq	%rcx
	addq	%r12, %rcx
	cmpq	$255, %rcx
	ja	.L89
	movl	$59, %esi
	movq	%r13, %rdi
	call	strchr
	testq	%rax, %rax
	je	.L100
.L61:
	movq	0(%rbp), %rdx
	movl	$.LC13, %esi
.L90:
	movq	stderr(%rip), %rdi
	xorl	%eax, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L89:
	movq	stderr(%rip), %rdi
	movq	0(%rbp), %rdx
	movl	$.LC12, %esi
	call	fprintf
	movl	$1, %edi
	call	exit
.L99:
	movq	stderr(%rip), %rcx
	movl	$.LC17, %edi
	movl	$26, %edx
	movl	$1, %esi
	call	fwrite
	movl	$1, %edi
	call	exit
.L100:
	movl	$62, %esi
	movq	%r13, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L61
	movq	16(%rbp), %rdx
	movl	%ebx, %eax
	movq	%r12, %rcx
	movq	%rdx, %rdi
	repnz scasb
	notq	%rcx
	leaq	-1(%rcx), %rax
	cmpq	$255, %rax
	ja	.L91
	movl	$58, %esi
	movq	%rdx, %rdi
	call	strchr
	testq	%rax, %rax
	jne	.L92
	movl	$.LC18, %esi
	movq	%r13, %rdi
	call	fopen
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L101
	movq	16(%rbp), %rsi
	movq	%rsp, %rdi
	call	strcpy
	jmp	.L66
.L86:
	movq	%r14, %rdi
	call	putline
.L66:
	leaq	256(%rsp), %rdi
	movq	%rbx, %rsi
	call	get_line.constprop.1
	testl	%eax, %eax
	jne	.L102
	movzbl	256(%rsp), %eax
	leaq	256(%rsp), %rsi
	cmpb	$35, %al
	je	.L86
	testb	%al, %al
	je	.L86
	leaq	512(%rsp), %rdi
	call	strcpy
	leaq	512(%rsp), %rsi
	leaq	768(%rsp), %rdi
	call	getword.constprop.2
	leaq	768(%rsp), %rsi
	movq	%rsp, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L72
	leaq	256(%rsp), %rsi
	jmp	.L86
.L97:
	movq	16(%rbp), %rdx
	movq	stderr(%rip), %rdi
	movl	$.LC10, %esi
	xorl	%eax, %eax
	call	fprintf
	movl	$.LC11, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L91:
	movq	0(%rbp), %rdx
	movl	$.LC14, %esi
	jmp	.L90
.L72:
	movq	%rsp, %rsi
	movl	$.LC22, %edi
	xorl	%eax, %eax
	call	printf
	movq	%r14, %rsi
	movq	%rsp, %rdi
	call	add_password
	jmp	.L88
.L93:
	leaq	256(%rsp), %rsi
	movq	%r14, %rdi
	call	putline
	leaq	256(%rsp), %rdi
	movq	%rbx, %rsi
	call	get_line.constprop.1
	testl	%eax, %eax
	jne	.L68
	leaq	256(%rsp), %rsi
	movq	%r14, %rdi
	call	putline
.L88:
	leaq	256(%rsp), %rdi
	movq	%rbx, %rsi
	call	get_line.constprop.1
	testl	%eax, %eax
	je	.L93
.L68:
	movq	%rbx, %rdi
	call	fclose
	movq	%r14, %rdi
	call	fclose
	movq	8(%rbp), %rcx
	leaq	1024(%rsp), %rdi
	movl	$temp_template, %edx
	movl	$.LC23, %esi
	xorl	%eax, %eax
	call	sprintf
	leaq	1024(%rsp), %rdi
	call	system
	movl	$temp_template, %edi
	call	unlink
	xorl	%edi, %edi
	call	exit
.L98:
	movq	%r13, %rsi
	movl	$.LC16, %edi
	xorl	%eax, %eax
	call	printf
	movq	24(%rbp), %rdi
	movq	%r14, %rsi
	call	add_password
	movq	%r14, %rdi
	call	fclose
	xorl	%edi, %edi
	call	exit
.L102:
	movq	%rsp, %rsi
	movl	$.LC21, %edi
	xorl	%eax, %eax
	call	printf
	movq	%r14, %rsi
	movq	%rsp, %rdi
	call	add_password
	jmp	.L68
.L101:
	movq	8(%rbp), %rdx
	movq	stderr(%rip), %rdi
	movl	$.LC19, %esi
	xorl	%eax, %eax
	call	fprintf
	movq	stderr(%rip), %rcx
	movl	$.LC20, %edi
	movl	$33, %edx
	movl	$1, %esi
	call	fwrite
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE10:
	.size	main, .-main
	.section	.rodata
	.align 32
	.type	itoa64, @object
	.size	itoa64, 65
itoa64:
	.string	"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	.globl	temp_template
	.data
	.align 16
	.type	temp_template, @object
	.size	temp_template, 16
temp_template:
	.string	"/tmp/htp.XXXXXX"
	.comm	tfd,4,4
	.ident	"GCC: (GNU) 6.2.0"
	.section	.note.GNU-stack,"",@progbits
